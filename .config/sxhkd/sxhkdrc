# bspwm hotkeys
#
# Cleanly quit bspwm
super + Mod1 + shift + q
	bspc quit 1 && pkill lemonpanel && pkill lemonbar

# Show keybindings
super + F1
	$TERMINAL -e keybindings.sh
#
# Window manipulation
# ______________

# Close window
super + x
	bspc node -c

super + y
    stack_windows
super + shift + y
    pkill -f stack_windows && bspc node @/ -E

# Kill window, note kill window kills all instances
super + shift + x
	bspc node -k                         
# Toggle tiling mode of window
super + shift + t
	bspc node -t {pseudo_tiled,tiled}
super + t
	{bspc node -t floating && window-placer $(bspc query -T -d | grep -o '"state":"floating"' | wc -l),bspc node -t tiled}
# Force all windows of the desktop to tile
super + ctrl + t
	bspcp tile
# Force all windows of the desktop to float and arrange them
super + ctrl + shift + t
	bspcp float
	
# Toggle fullscreen
super + shift + f 
	bspc node -t {fullscreen,tiled}	

# Try to keep size and position of the selected window
super + o
	bspc node -g private

# Make window sticky
super + i
	bspc node -g sticky

# Lock a window from closing
super + Escape
	bspc node -g locked 

### Map or unmap windows (functional equivalent of "minimize")
super + c
    whid dmenu

super + shift + c
    whid hide

super + ctrl + c
    whid last

#
# Window moving and splitting
# ______________    

# Autopresel (split window in its largest dimension)
super + ctrl + Return
	auto-presel

ctrl + space
	auto-presel
	
# Presel window for splitting in certain direction
alt + ctrl + {a,s,w,d}
	bspc node -p \~{west,south,north,east} -i

alt + ctrl + {h,j,k,l}
	bspc node -p \~{west,south,north,east}

alt + ctrl + {Left,Down,Up,Right}
	bspc node -p \~{west,south,north,east}

# Presel the desktop for splitting in certain direction
# alt + shift + {a,s,w,d}
	# bspc node @/ -p \~{west,south,north,east}
# 
# alt + shift + {h,j,k,l}
	# bspc node @/ -p \~{west,south,north,east}

# alt + shift + {Left,Down,Up,Right}
	# bspc node @/ -p \~{west,south,north,east}
# Set splitting ratio of windows
alt + ctrl + {1-9}
	bspc node -o 0.{1-9}
		
# Move current window to largest space or preselected area if there is one.
super + alt + Return
    windowpromoter

# Resize the focused window to preselection or based on receptacles
alt + Return
	resizetopresel.sh
		
# go (Shift=move) to desktop (and focus the monitor that the desktop is located on. Bspwm style)
super + {_,shift + }{1-9,0}
    bspc {desktop -f,node -d} ^{1-9,10}

## Alternative: i3 style behavior (focus nth, desktop of the focused monitor)
#super + {1-9,0}
#	focusdesktopofthismonitor {1-9}
#super + shift + {1-9,0}
#	movetodesktopofthismonitor {1-9,10}

## Another alternative: xmonad style desktops. You have 10 desktops shared between all monitors,
## and focusing a desktop focuses it on the currently focused monitor
#super + {1-9,0}
#	summondesktop.sh {1-9,10}
#super + shift + {1-9,0}
#	bspc node -d ^{1-9,10}

# Select previous / next desktop
super + {m,n}
	bspc desktop -f {prev.occupied,next.occupied} 

# cycle windows
alt + {_,shift + }Tab
    bspc node -f {next,prev}

# Go to specific window
super + Tab
	WindowSelector
	
#Focus windows by direction, works with multihead
super +  {a,s,w,d}
    focusmover {west,south,north,east}

super +  {h,j,k,l}
    focusmover {west,south,north,east}

super +  {Left,Down,Up,Right}
    focusmover {west,south,north,east}
        	
# Move tiled windows. Moving a tiled window to 
# preselected one moves into preselection instead. 
# Moving out of the screen should move the window to next monitor if possible
super + shift + {a,s,w,d}
	windowgrabber {west,south,north,east}

super + shift + {h,j,k,l}
	windowgrabber {west,south,north,east}
	
# Different style of movement: transplant into window in chosen direction
super + shift + {Left,Down,Up,Right}
	euclid_mover {west,south,north,east}

#resize windows
super + alt + {a,s,w,d}
	bspwm_resize.sh {west,south,north,east}

super + alt + {h,j,k,l}
	bspwm_resize.sh {west,south,north,east}
	
super + alt + {Left,Down,Up,Right}
	bspwm_resize.sh {west,south,north,east}

#
# Layout manipulation/desktop level controls
# ______________    

# Toggle monocle mode
super + f 
	bspc desktop -l next
	
# Balance tree
super + b
	bspc node @/ -B

# Balance brother node. If you do this on biggest window of the desktop, it usually means balancing all windows with except the biggest.
super + alt + b
	bspc node @brother -B
	
# Undo balancing (equalize windows)
super + ctrl + b
	bspc node @/ -E

# Toggle automatic balancing of windows
alt + b
	euclid_balancer

# Mirror and flip leaves of tree
super + {comma,period}
	bspc node @/ -F {horizontal,vertical}
	
# Rotate leaves of tree
super + shift + {comma,period}
	bspc node @/ -R {90,270}

# Change window gap

super + g
	bspc config -d focused window_gap {$gap,$(($gap+$gap)),$(($gap+$gap+$gap))}

super + alt + button{5,4}
	bspc config -d focused window_gap $((`bspc config -d focused window_gap` {+,-} 2 ))

#Reset window gap
super + alt + button2
    bspc config -d focused window_gap -$gap
#
# mouse bindings
# __________________

~button1
	DidIClickDesktop.sh && gapgrab	

#~button2
#	DidIClickDesktop.sh && BspwmDesktopMenu
#	DidIClickDesktop.sh && mygtkmenui -- .config/GTKmenu/BspwmDesktopMenui
#	DidIClickDesktop.sh && mygtkmenui -- .config/GTKmenu/BspwmWindowMenui
		
~button3
#	DidIClickDesktop.sh && rofimenu -desktop
#DidIClickDesktop.sh && mygtkmenui -- .config/GTKmenu/LaunchMenu

# Switch workspace by scrolling on the desktop. Causes scrolling issues on some systems.
#~button4
#	DidIClickDesktop.sh && bspc desktop -f next
#~button5
#	DidIClickDesktop.sh && bspc desktop -f prev
	
### Add or remove desktops by scrolling
super + ctrl + button5
    bspcp dsktp rm

super + ctrl + button4
    bspcp dsktp add

# Spawn applications popup menu and manually tile selected 
# app where your mouse was when you opened the menu. Smartsplit only chooses
# biggest dimension of the window, MouseLaunch only cares which edge is closer.
# mod5 is alt_gr (first key right from space) on most keyboards. 
mod5 + @button1
	smartsplit ; rofimenu -desktop
#	smartsplit ; dboxmenu
#    MouseLaunch ; mygtkmenui -- .config/GTKmenu/LaunchMenu

# Spawn window manipulation menu
# Mod1 is alt
#mod1 + @button2
	BspwmWindowMenu
# mygtkmenui -- .config/GTKmenu/BspwmWindowMenui


#click from keyboard
ctrl + shift + a	
	cautoclick -p 1000 -i 444 -r 44 -n 10000
ctrl + shift + q
	killall cautoclick
	


#
# Touchpad "gestures" (depend on your touchpad driver, very likely to be unavailable)
#_____________________
    
#
# spawn programs
#

# run applications
super + shift + space
	dmenu_recent -fn 'xos4 Terminus:size=15' -i -l 14 -w 600 -y $PANEL_HEIGHT

super + space
	dmenu_run

super + p
	dmenu_recent -h $PANEL_HEIGHT -fn 'xos4 Terminus:size=15' -i

super + Return
    st 
super + z
	st -e tmux


super + shift + z
	open-terminal-here
	
super + r
	rofi-finder.sh
super + shift + f
	firefox
super + shift + p
	poweroff
super + shift + o
	xtrlock

    		

super + e
	#st -f "Terminus:size=14:style=regular" ranger
	spacefm -n
alt + space
	bspc rule -a \* -o state=floating && st

# Use slightly bigger font for ranger
super + shift + e
	st -f "Terminus:size=14:style=regular" ranger

Print
	scrot
super 
        
	
#
# Media keys
#

#XF86AudioRaiseVolume
#	volume up

#XF86AudioLowerVolume
#	volume down

#XF86AudioMute
#	volume mute
	
#XF86MonBrightnessDown
# light -U 5 

#XF86MonBrightnessUp
# light -A 5
 

XF86Sleep
	systemctl suspend

# make sxhkd reload its configuration files:
super + shift + Escape
	pkill -USR1 -x sxhkd

# In case bspwmrc fails to execute/you wish have plugged in a new monitor
super + shift + r
	./bspwmrc

# Remove receptacles
super + BackSpace
  for i in $(bspc query -N -n .leaf.!window.local); do bspc node $i -k; done

super + F6
	xbacklight -dec 10
super + F7
    xbacklight -inc 10
super + F8
	amixer -c 0 set Headphone toggle
super + F9
	amixer -c 0 set Headphone 5- unmute
super + F10
	amixer -c 0 set Headphone 5+ unmute
